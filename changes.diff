diff --git a/examples/kitchensink/boot.ts b/examples/kitchensink/boot.ts
index 4569499c1..ccb117fd8 100644
--- a/examples/kitchensink/boot.ts
+++ b/examples/kitchensink/boot.ts
@@ -35,6 +35,9 @@ const start = async () => {
       }),
     ],
     options: {
+      users: {
+        enableRightToBeForgotten: true,
+      },
       payment: {
         filterSupportedProviders: async ({ providers }) => {
           return providers.sort((left, right) => {
diff --git a/packages/api/src/resolvers/mutations/index.ts b/packages/api/src/resolvers/mutations/index.ts
index 623457583..79eea4b6b 100755
--- a/packages/api/src/resolvers/mutations/index.ts
+++ b/packages/api/src/resolvers/mutations/index.ts
@@ -153,6 +153,7 @@ import prepareUserAvatarUpload from './users/prepareUserAvatarUpload.js';
 import rejectOrder from './orders/rejectOrder.js';
 import removePushSubscription from './users/removePushSubscription.js';
 import addPushSubscription from './users/addPushSubscription.js';
+import deleteAccount from './users/deleteAccount.js';
 
 export default {
   logout: acl(actions.logout)(logout),
@@ -318,4 +319,5 @@ export default {
   signPaymentProviderForCheckout: acl(actions.registerPaymentCredentials)(
     signPaymentProviderForCheckout,
   ),
+  deleteAccount,
 };
diff --git a/packages/api/src/resolvers/mutations/users/deleteAccount.ts b/packages/api/src/resolvers/mutations/users/deleteAccount.ts
new file mode 100644
index 000000000..4badfe509
--- /dev/null
+++ b/packages/api/src/resolvers/mutations/users/deleteAccount.ts
@@ -0,0 +1,11 @@
+import { Context } from '@unchainedshop/types/api.js';
+import { log } from '@unchainedshop/logger';
+
+const deleteAccount = async (_, { userId }, context: Context) => {
+  const { modules, userAgent } = context;
+  log(`mutation deleteAccount ${userId} ${userAgent}`, { userId });
+  await modules.users.deleteAccount({ userId }, context);
+  return true;
+};
+
+export default deleteAccount;
diff --git a/packages/api/src/schema/mutation.ts b/packages/api/src/schema/mutation.ts
index 86555f398..2e6f27878 100644
--- a/packages/api/src/schema/mutation.ts
+++ b/packages/api/src/schema/mutation.ts
@@ -884,6 +884,7 @@ export default [
       Remove user W3C push subscription object
       """
       removePushSubscription(p256dh: String!): User!
+      deleteAccount(userId: ID): Boolean!
     }
   `,
 ];
diff --git a/packages/core-orders/src/module/configureOrderDeliveriesModule.ts b/packages/core-orders/src/module/configureOrderDeliveriesModule.ts
index 8c1f082b3..37630d3f8 100644
--- a/packages/core-orders/src/module/configureOrderDeliveriesModule.ts
+++ b/packages/core-orders/src/module/configureOrderDeliveriesModule.ts
@@ -232,5 +232,12 @@ export const configureOrderDeliveriesModule = ({
         },
       );
     },
+    deleteUserOrderDeliveriesByOrderIds: async (orderIds) => {
+      log(`OrderDelivery -> Delete User order deliveries`, {
+        orderIds,
+      });
+      const deleteUserOrdersResult = await OrderDeliveries.deleteMany({ orderId: { $in: orderIds } });
+      return deleteUserOrdersResult.deletedCount;
+    },
   };
 };
diff --git a/packages/core-orders/src/module/configureOrderDiscountsModule.ts b/packages/core-orders/src/module/configureOrderDiscountsModule.ts
index a92a038a9..818d82e2d 100644
--- a/packages/core-orders/src/module/configureOrderDiscountsModule.ts
+++ b/packages/core-orders/src/module/configureOrderDiscountsModule.ts
@@ -231,5 +231,12 @@ export const configureOrderDiscountsModule = ({
       await emit('ORDER_UPDATE_DISCOUNT', { discount });
       return discount;
     },
+    deleteUserOrderDiscountsByOrderIds: async (orderIds) => {
+      log(`OrderDiscounts -> Delete User orders discount`, {
+        orderIds,
+      });
+      const deleteUserOrdersResult = await OrderDiscounts.deleteMany({ orderId: { $in: orderIds } });
+      return deleteUserOrdersResult.deletedCount;
+    },
   };
 };
diff --git a/packages/core-orders/src/module/configureOrderPaymentsModule.ts b/packages/core-orders/src/module/configureOrderPaymentsModule.ts
index 763d81ae8..33f9e40c9 100644
--- a/packages/core-orders/src/module/configureOrderPaymentsModule.ts
+++ b/packages/core-orders/src/module/configureOrderPaymentsModule.ts
@@ -24,9 +24,9 @@ export const buildFindByContextDataSelector = (context: any): mongodb.Filter<Ord
     (currentSelector, key) =>
       context[key] !== undefined
         ? {
-            ...currentSelector,
-            [`context.${key}`]: context[key],
-          }
+          ...currentSelector,
+          [`context.${key}`]: context[key],
+        }
         : currentSelector,
     {},
   );
@@ -352,5 +352,12 @@ export const configureOrderPaymentsModule = ({
         },
       );
     },
+    deleteUserOrderPaymentsByOrderIds: async (orderIds) => {
+      log(`OrderPayment -> Delete User orders payment`, {
+        orderIds,
+      });
+      const deleteUserOrdersResult = await OrderPayments.deleteMany({ orderId: { $in: orderIds } });
+      return deleteUserOrdersResult.deletedCount;
+    },
   };
 };
diff --git a/packages/core-orders/src/module/configureOrderPositionsModule.ts b/packages/core-orders/src/module/configureOrderPositionsModule.ts
index 6455c9336..fadbfddd7 100644
--- a/packages/core-orders/src/module/configureOrderPositionsModule.ts
+++ b/packages/core-orders/src/module/configureOrderPositionsModule.ts
@@ -84,8 +84,7 @@ export const configureOrderPositionsModule = ({
       const originalProductId = originalProduct ? originalProduct._id : undefined;
 
       log(
-        `Create ${quantity}x Position with Product ${productId} ${
-          quotationId ? ` (${quotationId})` : ''
+        `Create ${quantity}x Position with Product ${productId} ${quotationId ? ` (${quotationId})` : ''
         }`,
         { orderId, productId, originalProductId },
       );
@@ -372,5 +371,12 @@ export const configureOrderPositionsModule = ({
 
       return upsertedOrderPosition;
     },
+    deleteUserOrderPositionsByOrderIds: async (orderIds) => {
+      log(`OrderPosition -> Delete User orders`, {
+        orderIds,
+      });
+      const deleteUserOrdersResult = await OrderPositions.deleteMany({ orderId: { $in: orderIds } });
+      return deleteUserOrdersResult.deletedCount;
+    },
   };
 };
diff --git a/packages/core-orders/src/module/configureOrdersModule-mutations.ts b/packages/core-orders/src/module/configureOrdersModule-mutations.ts
index 7ed47720e..acca8370e 100644
--- a/packages/core-orders/src/module/configureOrdersModule-mutations.ts
+++ b/packages/core-orders/src/module/configureOrdersModule-mutations.ts
@@ -236,7 +236,13 @@ export const configureOrderModuleMutations = ({
       }
       return null;
     },
-
     updateCalculation,
+    deleteUserOrders: async (userId) => {
+      log(`OrderPosition -> Delete User orders`, {
+        userId,
+      });
+      const deletedUserOrdersResult = await Orders.deleteMany({ userId });
+      return deletedUserOrdersResult.deletedCount;
+    },
   };
 };
diff --git a/packages/core-products/src/module/configureProductReviewsModule.ts b/packages/core-products/src/module/configureProductReviewsModule.ts
index 84f7e9bf3..92469c54c 100644
--- a/packages/core-products/src/module/configureProductReviewsModule.ts
+++ b/packages/core-products/src/module/configureProductReviewsModule.ts
@@ -170,7 +170,6 @@ export const configureProductReviewsModule = async ({
 
       return productReview;
     },
-
     votes: {
       userIdsThatVoted,
 
diff --git a/packages/core-quotations/src/quotations-index.ts b/packages/core-quotations/src/quotations-index.ts
index 9a60f6a01..2a4c4aea6 100644
--- a/packages/core-quotations/src/quotations-index.ts
+++ b/packages/core-quotations/src/quotations-index.ts
@@ -1,7 +1,6 @@
 export { configureQuotationsModule } from './module/configureQuotationsModule.js';
 
 export { QuotationStatus } from './db/QuotationStatus.js';
-
 export { QuotationAdapter } from './director/QuotationAdapter.js';
 export { QuotationDirector } from './director/QuotationDirector.js';
 
diff --git a/packages/core-users/src/module/configureUsersModule.ts b/packages/core-users/src/module/configureUsersModule.ts
index 592cc96e0..f799e1dca 100644
--- a/packages/core-users/src/module/configureUsersModule.ts
+++ b/packages/core-users/src/module/configureUsersModule.ts
@@ -1,7 +1,6 @@
 import localePkg from 'locale';
 import bcrypt from 'bcryptjs';
 import { Address, Contact } from '@unchainedshop/types/common.js';
-import { ModuleInput, UnchainedCore } from '@unchainedshop/types/core.js';
 import {
   User,
   UserQuery,
@@ -10,7 +9,9 @@ import {
   UserProfile,
   UserSettingsOptions,
   UserData,
+  UsersModule,
 } from '@unchainedshop/types/user.js';
+import { ModuleInput, UnchainedCore } from '@unchainedshop/types/core.js';
 import { emit, registerEvents } from '@unchainedshop/events';
 import {
   generateDbFilterById,
@@ -19,6 +20,7 @@ import {
   generateDbObjectId,
 } from '@unchainedshop/mongodb';
 import { systemLocale } from '@unchainedshop/utils';
+import crypto from 'crypto';
 import { FileDirector } from '@unchainedshop/file-upload';
 import { SortDirection, SortOption } from '@unchainedshop/types/api.js';
 import { UsersCollection } from '../db/UsersCollection.js';
@@ -28,6 +30,38 @@ import { configureUsersWebAuthnModule } from './configureUsersWebAuthnModule.js'
 import * as pbkdf2 from './pbkdf2.js';
 import * as sha256 from './sha256.js';
 
+const isDate = (value) => {
+  const date = new Date(value);
+  return !Number.isNaN(date.getTime());
+};
+
+function maskString(value) {
+  if (isDate(value)) return value;
+  return crypto
+    .createHash('sha256')
+    .update(JSON.stringify([value, new Date().getTime()]))
+    .digest('hex');
+}
+
+const maskUserPropertyValues = (user) => {
+  if (typeof user !== 'object' || user === null) {
+    return user;
+  }
+  if (Array.isArray(user)) {
+    return user.map((item) => maskUserPropertyValues(item));
+  }
+  const maskedUser = {};
+  Object.keys(user).forEach((key) => {
+    if (typeof user[key] === 'string' || isDate(user[key])) {
+      maskedUser[key] = maskString(user[key]);
+    } else {
+      maskedUser[key] = maskUserPropertyValues(user[key]);
+    }
+  });
+
+  return maskedUser;
+};
+
 const { Locale } = localePkg;
 
 const USER_EVENTS = [
@@ -72,9 +106,7 @@ export const configureUsersModule = async ({
   db,
   options,
   migrationRepository,
-}: ModuleInput<UserSettingsOptions>) => {
-  userSettings.configureSettings(options || {}, db);
-
+}: ModuleInput<UserSettingsOptions>): Promise<UsersModule> => {
   registerEvents(USER_EVENTS);
   const Users = await UsersCollection(db);
 
@@ -753,5 +785,16 @@ export const configureUsersModule = async ({
         {},
       );
     },
+    deleteAccount: async ({ userId }, context) => {
+      if (!options?.enableRightToBeForgotten) throw Error('Right to be forgotten is disabled');
+      const { modules } = context;
+      const { _id, ...user } = await modules.users.findUserById(userId);
+      delete user?.services;
+
+      const maskedUserData = maskUserPropertyValues({ ...user, meta: null });
+      await modules.bookmarks.deleteByUserId(userId);
+      await modules.users.updateUser({ _id }, { $set: { ...maskedUserData, deleted: new Date() } }, {});
+      return true;
+    },
   };
 };
diff --git a/packages/core/src/core-index.ts b/packages/core/src/core-index.ts
index c375ac78a..4211ba194 100644
--- a/packages/core/src/core-index.ts
+++ b/packages/core/src/core-index.ts
@@ -96,6 +96,7 @@ export const initCore = async ({
   });
   const users = await configureUsersModule({
     db,
+    options: options.users,
     migrationRepository,
   });
   const warehousing = await configureWarehousingModule({
diff --git a/packages/types/enrollments.ts b/packages/types/enrollments.ts
index ebbf5829a..b50e83597 100644
--- a/packages/types/enrollments.ts
+++ b/packages/types/enrollments.ts
@@ -216,7 +216,6 @@ export type IEnrollmentDirector = IBaseDirector<IEnrollmentAdapter> & {
 /*
  * Settings
  */
-
 export interface EnrollmentsSettingsOptions {
   autoSchedulingSchedule?: WorkerSchedule;
   enrollmentNumberHashFn?: (enrollment: Enrollment, index: number) => string;
diff --git a/packages/types/index.d.ts b/packages/types/index.d.ts
index b59d8d5a9..275c8811c 100644
--- a/packages/types/index.d.ts
+++ b/packages/types/index.d.ts
@@ -88,6 +88,9 @@ import {
   QuotationsSettingsOptions,
   QuotationStatus as QuotationStatusType,
 } from './quotations.js';
+
+import { UserServices, UserSettingsOptions, UsersModule } from './user.js';
+
 import {
   IWarehousingAdapter,
   IWarehousingDirector,
@@ -347,6 +350,12 @@ declare module '@unchainedshop/core-quotations' {
   const QuotationError: typeof QuotationErrorType;
 }
 
+declare module '@unchainedshop/core-users' {
+  function configureUsersModule(params: ModuleInput<UserSettingsOptions>): Promise<UsersModule>;
+
+  const userServices: UserServices;
+}
+
 declare module '@unchainedshop/core-warehousing' {
   function configureWarehousingModule(
     params: ModuleInput<WorkerSettingsOptions>,
diff --git a/packages/types/modules.ts b/packages/types/modules.ts
index 94bfb6386..db9d7d151 100644
--- a/packages/types/modules.ts
+++ b/packages/types/modules.ts
@@ -13,7 +13,7 @@ import { OrdersModule, OrdersSettingsOptions } from './orders.js';
 import { PaymentModule, PaymentSettingsOptions } from './payments.js';
 import { ProductsModule, ProductsSettingsOptions } from './products.js';
 import { QuotationsModule, QuotationsSettingsOptions } from './quotations.js';
-import { UsersModule, UserSettingsOptions } from './user.js';
+import { UserSettingsOptions, UsersModule } from './user.js';
 import { WarehousingModule } from './warehousing.js';
 import { WorkerModule, WorkerSettingsOptions } from './worker.js';
 
diff --git a/packages/types/orders.deliveries.ts b/packages/types/orders.deliveries.ts
index d97a9efcc..e37e72713 100644
--- a/packages/types/orders.deliveries.ts
+++ b/packages/types/orders.deliveries.ts
@@ -72,6 +72,7 @@ export type OrderDeliveriesModule = {
     orderDelivery: OrderDelivery,
     unchainedAPI: UnchainedCore,
   ) => Promise<OrderDelivery>;
+  deleteUserOrderDeliveriesByOrderIds: (orderIds: string[]) => Promise<number>;
 };
 
 export type OrderDeliveryDiscount = Omit<OrderPrice, '_id'> & {
diff --git a/packages/types/orders.discounts.ts b/packages/types/orders.discounts.ts
index 84254d316..458800db5 100644
--- a/packages/types/orders.discounts.ts
+++ b/packages/types/orders.discounts.ts
@@ -52,4 +52,5 @@ export type OrderDiscountsModule = {
   create: (doc: OrderDiscount) => Promise<OrderDiscount>;
   update: (orderDiscountId: string, doc: OrderDiscount) => Promise<OrderDiscount>;
   delete: (orderDiscountId: string, unchainedAPI: UnchainedCore) => Promise<OrderDiscount>;
+  deleteUserOrderDiscountsByOrderIds: (orderIds: string[]) => Promise<number>;
 };
diff --git a/packages/types/orders.payments.ts b/packages/types/orders.payments.ts
index c9e87dc88..0ee16eed9 100644
--- a/packages/types/orders.payments.ts
+++ b/packages/types/orders.payments.ts
@@ -111,6 +111,7 @@ export type OrderPaymentsModule = {
   ) => Promise<OrderPayment>;
 
   updateCalculation: (orderPayment: OrderPayment, unchainedAPI: UnchainedCore) => Promise<OrderPayment>;
+  deleteUserOrderPaymentsByOrderIds: (orderIds: string[]) => Promise<number>;
 };
 
 export type OrderPaymentDiscount = Omit<OrderPrice, '_id'> & {
diff --git a/packages/types/orders.positions.ts b/packages/types/orders.positions.ts
index e4331eb5a..7ef121d86 100644
--- a/packages/types/orders.positions.ts
+++ b/packages/types/orders.positions.ts
@@ -91,6 +91,7 @@ export type OrderPositionsModule = {
     params: { order: Order; product: Product },
     unchainedAPI: UnchainedCore,
   ) => Promise<OrderPosition>;
+  deleteUserOrderPositionsByOrderIds: (orderIds: string[]) => Promise<number>;
 };
 
 export type OrderPositionDiscount = Omit<OrderPrice, '_id'> & {
diff --git a/packages/types/orders.ts b/packages/types/orders.ts
index 9502b83b7..0e67a689a 100644
--- a/packages/types/orders.ts
+++ b/packages/types/orders.ts
@@ -147,6 +147,7 @@ export interface OrderMutations {
   updateContact: (orderId: string, contact: Contact, unchainedAPI: UnchainedCore) => Promise<Order>;
   updateContext: (orderId: string, context: any, unchainedAPI: UnchainedCore) => Promise<Order | null>;
   updateCalculation: (orderId: string, unchainedAPI: UnchainedCore) => Promise<Order>;
+  deleteUserOrders: (userId: string) => Promise<number>;
 }
 
 export type OrdersModule = OrderQueries &
diff --git a/packages/types/quotations.ts b/packages/types/quotations.ts
index f1125d4ca..4b8b0a5a6 100644
--- a/packages/types/quotations.ts
+++ b/packages/types/quotations.ts
@@ -154,7 +154,6 @@ export type IQuotationDirector = IBaseDirector<IQuotationAdapter> & {
 /*
  * Settings
  */
-
 export interface QuotationsSettingsOptions {
   quotationNumberHashFn?: (quotation: Quotation, index: number) => string;
 }
diff --git a/packages/types/user.ts b/packages/types/user.ts
index 3e4884c27..70a9203aa 100644
--- a/packages/types/user.ts
+++ b/packages/types/user.ts
@@ -110,6 +110,7 @@ export interface UserSettingsOptions {
   validateUsername?: (username: string) => Promise<boolean>;
   validateNewUser?: (user: Partial<User>) => Promise<User>;
   validatePassword?: (password: string) => Promise<boolean>;
+  enableRightToBeForgotten?: boolean;
 }
 export interface UserSettings {
   mergeUserCartsOnLogin: boolean;
@@ -215,6 +216,10 @@ export type UsersModule = {
     },
   ) => Promise<void>;
   removePushSubscription: (userId: string, p256dh: string) => Promise<void>;
+  deleteAccount: (params: { userId?: string }, context: UnchainedCore) => Promise<boolean>;
+  hashPassword(password: string): Promise<{
+    pbkdf2: string;
+  }>;
 };
 
 /*
